@startuml
actor "User" as user
participant "Kalk.Pro сайт\nFrontend приложение OptiStair" as frontend
participant "Kalk.Pro сайт\nBackend" as site
participant "K8s ClusterOptiStair\nOptiStair Calculator" as calc
participant "K8s ClusterOptiStair\nRequestManager" as app
participant "K8s ClusterOptiStair\nOptiStair DB" as db
== Пользователь зарегистрировался на сайте ==
user -> frontend: Авторизация на сайте
frontend -> site: POST /user/auth, body: {login, password}
opt ЕСЛИ РАНЕЕ USER-ACL НЕ БЫЛИ УСТАНОВЛЕНЫ
    site -> app: POST: /api/user-acl, headers: X-API-KEY
        note right of site
            Установить
            max_simultaneous_requests = 1
            available_calculations_count = 999
        end note
    app -> db: Установить параметры доступа
        note right of app
            INSERT user_acl (`max_simultaneous_requests`, `available_calculations_count`)
            VALUES ({maxSimultaneousRequests}, {availableCalculationsCount})
        end note
    app <-- db: Параметры установлены
    site <-- app: Настройки пользователя установлены
end
frontend <-- site: Пользователь авторизован на сайте
user <-- frontend: Пользователь получил доступ к веб-приложению

== Frontend App: Бесконечный цикл опроса состояния расчёта (после авторизации) ==
user -> frontend: Запуск веб-приложения
loop Периодический запрос состояния расчёта через каждые 5 секунд
    frontend -> app: Получить статус расчёта GET: /api/request-status, params: [userId]
    app -> db: Получить статус расчёта
        note right of app
            Выборки из таблицы optimal_configurations
            status = 'new' - Новый расчёт
            status = 'processing' - В процессе расчёта (можно запросить прогресс)
            status = 'ready' - Можно запросить подобранные конфигурации
        end note

        note right of app
            // Готовые расчёты
            SELECT r.id as request_id
            FROM requests r, user_acl u
            WHERE
            u.id = r.user_id
            AND u.email={userId}
            AND r.status IN ('ready')
        end note
    app <-- db: Текущий статус запросов на расчёт от пользователя
        note right of app
            [
                {
                    requestId: int
                    status: null
                    positionInQueue: 0
                    progress: 0.0
                    result: {}
                },
                {...},
                {...},
                {...}
            ]
        end note
        note right of frontend
            Frontend хранит frontendRequestId запроса,
            если запрос уже был создан
        end note
    alt ЗАПРОСОВ НЕТ
        frontend <-- app: HTTP 200
        note right of frontend
            []
        end note
        user <-- frontend: Пользователь может нажать кнопку "Рассчитать"
        note right of frontend #LightGreen
            Кнопка "Рассчитать" - разблокирована
        end note
    else IF СТАТУС_РАСЧËТА = 'new'
        frontend <-- app: HTTP 200
        note right of frontend
            requestId: frontendRequestId
            status: 'new'
            positionInQueue: 5
            progress: 0.0
            result: {}
        end note
        note right of frontend #Pink
            Кнопка "Рассчитать" - заблокирована
        end note
        user <-- frontend: Показать сообщение пользователю
        note right of user
            Ваш расчёт 5-й в очереди
        end note
    else IF СТАТУС_РАСЧËТА = 'processing'
        frontend <-- app: HTTP 200
        note right of frontend
            requestId: frontendRequestId
            status: 'processing'
            positionInQueue: 0
            progress: 71.32
            result: {}
        end note
        note right of frontend #Pink
            Кнопка "Рассчитать" - заблокирована
        end note
        user <-- frontend: Показать сообщение пользователю
        note right of user
            Готовность вашего расчёта 71.32%
        end note
        opt IF progress не меняется в течении 30 сек THEN Расчёт завис на сервере
            user <-- frontend: Показать сообщение пользователю
            note right of user
                Не удается выполнить расчёт.
                Пожалуйста измените параметры проёма
                или критерии удобства лестницы.
            end note
            note right of frontend #Pink
                Кнопка "Рассчитать" - заблокирована
            end note
            user -> frontend: Вносит изменения в параметры
            note right of frontend #LightGreen
                Кнопка "Рассчитать" - разблокирована
            end note
        end
    else IF СТАТУС_РАСЧËТА = 'fail'
        user <-- frontend: Показать сообщение пользователю
        note right of user
            Не удается выполнить расчёт.
            Пожалуйста измените параметры проёма
            или критерии удобства лестницы.
        end note
        note right of frontend #Pink
            Кнопка "Рассчитать" - заблокирована
        end note
        user -> frontend: Вносит изменения в параметры
        note right of frontend #LightGreen
            Кнопка "Рассчитать" - разблокирована
        end note
    else IF СТАТУС_РАСЧËТА = 'ready'
        app -> db: Получить найденные конфигурации
            note right of app
                SELECT configurations
                FROM optimal_configurations
                WHERE request_id={id}
            end note
        app <- db: configurations
        frontend <-- app: HTTP 200
        note right of frontend
            requestId: frontendRequestId
            status: 'ready'
            positionInQueue: 0
            progress: 100.0
            result: {...configurations...}
        end note
        note right of frontend #LightGreen
            Кнопка "Рассчитать" - разблокирована
        end note
        user <-- frontend: Вывести найденные конфигурации лестниц
        note right of user
            Список оптимальных конфигураций лестниц
        end note
        frontend --> app: PATCH: /api/request-status
            app -> db: Установить status='ready'
                note right of app
                    UPDATE requests SET
                        status='send',
                        update_time=NOW()
                    WHERE user_email={userEmail}
                    AND calculation_id={userCalculationId}
                    AND status='ready'
                end note
            app <-- db: Значение available_calculations_count
        frontend <-- app: Статус запроса изменён
    else IF HTTP_CODE = 400 OR HTTP_CODE = 408
        frontend <-- app: HTTP 400 || 408
        note right of frontend #Pink
            Кнопка "Рассчитать" - заблокирована
        end note
        user <-- frontend: Показать ошибку пользователю
        note right of user
            400 Bad Request
            408 Request Timeout
        end note
    else IF HTTP_CODE = 500
        frontend <-- app: HTTP 500
        note right of frontend #Pink
            Кнопка "Рассчитать" - заблокирована
        end note
        user <-- frontend: Показать ошибку пользователю
        note right of user
            500 Internal Server Error
        end note
    end
end

== Frontend App: Создание запроса на подбор оптимальной конфигурации лестницы ==
note right of frontend #LightGreen
    Кнопка "Рассчитать" - разблокирована
end note
user -> frontend: Запрос на подбор оптимальной конфигурации
frontend -> app: POST: /api/{stair-type}/request, body: {userId, comfortParams, opening}
    note right of frontend
        Установить параметры подбора конфигураций
        - идентификатор расчёта
        - критерии удобства лестницы
        - параметры проема
        - тип конструкции
    end note
app -> db: Проверка ACL пользователя
    note right of app
        SELECT  max_simultaneous_requests,
                available_calculations_count
        FROM user_acl
    end note
app <-- db: Значение available_calculations_count
alt IF available_calculations_count > 0 THEN Пользователю доступен подбор конфигураций лестниц
    app -> db: Проверка запросов пользователя, которые сейчас в состоянии расчёта
        note right of app
            SELECT COUNT(*) AS processing_requests
            FROM requests
            WHERE user_email={userEmail}
            AND status IN ('new', 'processing')
        end note
    app <-- db: Значение processing_requests

    alt IF max_simultaneous_requests > processing_requests THEN Можно разместить новый расчёт
        app -> db: Создать новый запрос на подбор конфигураций
            note right of app
                INSERT requests VALUES (... status='new', request_data={...} ...)
            end note
        app <-- db: Запрос создан
        frontend <-- app: HTTP: 201 Success
        note right of frontend #Pink
            Кнопка "Рассчитать" - заблокирована
        end note
        user <- frontend: Сообщение со статусом состояние расчёта
        note right of user
            Ожидание очереди расчёта... 30 сек
        end note
    else ELSE Превышен лимит на размещение новых запросов
        frontend <-- app: HTTP: 429 Too Many Requests
        note right of frontend #Pink
            Кнопка "Рассчитать" - заблокирована
        end note
        user <- frontend: Сообщение пользователю о запрете размещения запроса
        note right of user
            Превышен лимит на размещение новых запросов
            Попробуйте позже
        end note
    end
else ELSE Использованы все доступные запросы на подбор конфигураций
    frontend <-- app: HTTP: 402 Payment Required
    note right of frontend #Pink
        Кнопка "Рассчитать" - заблокирована
    end note
    user <- frontend: Сообщение пользователю о запрете размещения запроса
    note right of user
        Использованы все доступные запросы на подбор конфигураций
        Требуется оплата доступа
    end note
end

== Backend: Задание на выполнение расчёта и очереди ==
loop Периодический опрос на появление новых запросов на расчёт через каждые 5 секунд,\nпосле завершения цикла обработки предыдущей партии запросов
    calc -> app: GET: /{stair-type}/actual-requests
    calc <- app: Массив запросов для {stair-type} со статусом status='new'
    loop Пока есть запрос на расчёт

        calc -> calc: СТАРТ:\nПодбор оптимальной конфигурации лестницы

        activate calc #DarkSalmon
        activate calc #Pink
        loop Периодическая отправка прогресса расчёта (например, каждые 10%)
          app <- calc: Прогресс WebHook PATCH: /request-status, body: {requestId, status, progress}
          activate app #Pink
          app -> db: Изменить прогресс расчёта
            note right of app
                UPDATE requests SET
                  status=body.status,
                  progress=body.progress,
                  create_time=NOW(),
                  update_time=NOW(),
                  progress_percent=0.00
                WHERE
                  id=body.requestId
            end note
          app <-- db: Ok
          app --> calc: HTTP 200
          deactivate app
        end
        calc -> calc: КОНЕЦ:\nРасчёт завершен
        deactivate calc
        loop WebHook retry WHILE HTTP !== 200 && RETRY_COUNT < MAX_RETRY
            app <- calc: Результат расчёта WebHook POST: /save-result, body: {requestId, configurations}
            activate app #Pink
            app --> calc: HTTP 200
        end loop

        deactivate calc
        app -> db: Записать в БД результат расчёта
        note right of app
          // В одной транзакции
          INSERT optimal_configurations (`request_id`, `configurations`)
          VALUES (body.requestId, {calculationResult});
          UPDATE requests SET
              progress_percent=100.0,
              status='ready'
              update_time=NOW()
          WHERE id={body.requestId};
        end note
        app <-- db: Результат расчёта записан в БД
        deactivate app
    end
end
@enduml
